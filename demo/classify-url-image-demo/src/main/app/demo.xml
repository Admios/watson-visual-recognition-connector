<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:watson-visual-recognition="http://www.mulesoft.org/schema/mule/watson-visual-recognition" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/watson-visual-recognition http://www.mulesoft.org/schema/mule/watson-visual-recognition/current/mule-watson-visual-recognition.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
    <watson-visual-recognition:config name="Watson_Visual_Recognition__Configuration" apiKey="${watson.apikey}" doc:name="Watson Visual Recognition: Configuration"/>
    <http:listener-config name="HTTP_Listener_Configuration" host="0.0.0.0" port="8081" doc:name="HTTP Listener Configuration"/>
    <flow name="RegisterCarAccidentFlow">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/car-accident" doc:name="HTTP"/>
        <dw:transform-message doc:name="Build Request">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	url: inboundProperties."http.query.params".image as :string
} as :object {
	class : "org.mule.modules.watsonvisualrecognition.model.ClassifyImageRequest"
}]]></dw:set-payload>
        </dw:transform-message>
        <watson-visual-recognition:classify-image config-ref="Watson_Visual_Recognition__Configuration" doc:name="Classify Image"/>
        <dw:transform-message doc:name="Get Classes">
            <dw:input-payload doc:sample="sample_data/VisualClassification.dwl"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload.images.classifiers[0].classes map {
	classes: $.name
}]]></dw:set-payload>
        </dw:transform-message>
        <choice doc:name="Validate the image">
            <when expression="#[payload.get(0).classes.contains(&quot;car&quot;)]">
                <dw:transform-message doc:name="Generate Response">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	client: inboundProperties."http.query.params".client,
	description: inboundProperties."http.query.params".description,
	image: inboundProperties."http.query.params".image
}]]></dw:set-payload>
                </dw:transform-message>
                <flow-ref name="SaveAccidentInExternalSystem" doc:name="SaveAccidentInExternalSystem"/>
            </when>
            <otherwise>
                <set-payload value="{&quot;status&quot;: &quot;Error&quot;, &quot;Description&quot;: &quot;The image is invalid, doesn't contain any car&quot;}" doc:name="Invalid Image"/>
            </otherwise>
        </choice>
    </flow>
    <sub-flow name="SaveAccidentInExternalSystem">
        <logger level="INFO" doc:name="Logger"/>
    </sub-flow>
</mule>
